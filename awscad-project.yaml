Parameters:
  bucketName:
    Type: String
    Default: "s3bucket-cfn-project"
    Description: "Enter Your S3 Bucket"

  vpcCIDR:
    Type: String
    Default: "178.14.0.0/16"
    Description: "Enter Your VPC CIDR"

  PublicSubnet1CIDR:
    Type: String
    Default: "178.14.0.0/24"
    Description: "Enter Your Subnet 1 CIDR Block"

  PublicSubnet2CIDR:
    Type: String
    Default: "178.14.1.0/24"
    Description: "Enter Your Subnet 2 CIDR Block"

  az1:
    Type: String
    Default: "ap-southeast-2a"
    Description: "Enter Your AZ-1 ID"

  az2:
    Type: String
    Default: "ap-southeast-2b"
    Description: "Enter Your AZ-2 ID"

  dbPort:
    Type: Number
    Default: 3306
    Description: "Enter Your Database Port Number"
  
  amiID:
    Type: String
    Default: 'ami-0c2489d63913b3b1f'
    Description: "Enter Your EC2 AMI ID"

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro
    
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'Project KP'
    Description: "Enter Your Key Pair Name"

  DBInstanceID:
    Type: String
    Description: "Enter Your RDS Instance Name"

  DBName:
    Type: String
    Description: "Enter Your RDS DB Name"

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: "Enter Your RDS Instance Class"

  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB
    
  DBEngine:
    Type: String
    Default: 'MySQL'
    Description: "Enter Your RDS DB Engine Type"

  EngineVersion:
    Type: String
    Default: '8.0.33'
    Description: "Enter Your RDS DB Engine Version"

  DBUsername:
    NoEcho: 'true'
    Description: "Username for MySQL database access"
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  S3bucket: 
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref bucketName
      VersioningConfiguration:
        Status: Enabled
        
  projectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: stack
          Value: production

  projectInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref projectVPC
      InternetGatewayId: !Ref projectInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref projectVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Ref az1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Stack
        Value: production

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref projectVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Ref az2
      MapPublicIpOnLaunch: true

  mainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref projectVPC
      Tags:
      - Key: stack
        Value: production 
      
  projectRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref mainRouteTable

  projectRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref mainRouteTable
          
  mymainRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref mainRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref projectInternetGateway            

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH (22) and HTTP (80) access"
      VpcId: !Ref projectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP (80) access"
      VpcId: !Ref projectVPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow MySQL (3306) access"
      VpcId: !Ref projectVPC # Use the VPC resource reference
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
 
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref amiID
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref EC2KeyPair
      SecurityGroups:
        - !Ref EC2SecurityGroup

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref S3Role 

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '2'
       
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref projectVPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  S3Role: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref EngineVersion
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword 
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
